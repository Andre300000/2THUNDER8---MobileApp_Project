<!-- Blog App containg all the structural code for web page-->
<!-- Authors
Aliz Dhital 
Andrew Ali 
Olorunfemi Adeosun 
Lisha Tamang  -->
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Project Phase one</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" />
    <link rel="stylesheet" href="./final.css" />

    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <script src="jquery-3.6.0.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
    <script src="./express.js"> </script>


    <script src="./final.js"></script>
    <script src="./keyboard.js"></script>

    <style>
        /* 
    Styling for blog app including alert boxes, popup keyboard and other buttons that makes web browser look good

*/
/* 
Authors
Aliz Dhital 
Andrew Ali 
Olorunfemi Adeosun 
Lisha Tamang  */

/* HTML5 elements section */

.switch {
  position: relative;
  display: inline-block;
  width: 60px;
  height: 34px;
}

.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

.slider {
  position: absolute;
  cursor: pointer;
  top: 00;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ccc;
  -webkit-transition: 0.4s;
  transition: 0.4s;
}

.slider:before {
  position: absolute;
  content: "";
  height: 26px;
  width: 26px;
  left: 4px;
  bottom: 4px;
  background-color: white;
  -webkit-transition: 0.4s;
  transition: 0.4s;
}

input:checked + .slider {
  background-color: #2196f3;
}

input:focus + .slider {
  box-shadow: 0 0 1px #2196f3;
}

input:checked + .slider:before {
  -webkit-transform: translateX(26px);
  -ms-transform: translateX(26px);
  transform: translateX(26px);
}

/* Rounded sliders */
.slider.round {
  border-radius: 34px;
}

.slider.round:before {
  border-radius: 50%;
}
/* Styling for keyboard */
.keyboard {
  position: fixed;
  bottom: 0;
  width: 100%;
  padding: 5px 0;
  background: #fdffff;
  background-image: linear-gradient(
      rgba(255, 255, 255, 0.5),
      rgba(255, 255, 255, 0.5)
    ),
    url("4572_montreal_canadiens-jersey-2021.png");
  background-size: cover;
  background-position: center;
  box-shadow: 0 0 50px rgba(0, 0, 0);
  user-select: none;
  transition: bottom 0.4s;
  border: 3px solid #000000;
  border-radius: 10px;
}

.keyboard--hidden {
  bottom: -100%;
}

.keyboard__keys {
  text-align: center;
}

.keyboard__key:hover {
  transform: scale(1.5);
  background: rgba(151, 1, 1);
  transition: 0.5s;
}

.keyboard__key {
  height: 50px;
  width: 50px;
  max-width: 90px;
  margin: 6px;
  border-radius: 8px;
  border: 1px solid #000000;
  background: rgba(209, 1, 1);
  color: #ffffff;
  font-size: 1.05rem;
  outline: none;
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  text-align: center;
  justify-content: center;
  vertical-align: top;
  padding: 0;
  position: relative;
  transition: 0.5s;
}

.keyboard__key:active {
  background: rgba(117, 0, 0);
}

.keyboard__key--wide {
  width: 12%;
  background: rgba(0, 72, 206);
  color: #ffffff;
}

.keyboard__key--wide:hover {
  background: rgba(1, 54, 153);
}

.keyboard__key--wide:active {
  background: rgba(0, 44, 126);
}

.keyboard__key--extra-wide {
  width: 80%;
  max-width: 515px;
  position: relative;
  background: rgba(0, 72, 206);
  color: #ffffff;
}

.keyboard__key--extra-wide:hover {
  width: 100%;
  max-width: 515px;
  position: relative;
  background: rgba(1, 40, 112);
  color: #ffffff;
}

.keyboard__key--extra-wide:active {
  background: rgba(0, 44, 126);
}

.keyboard__key--activatable::after {
  content: "";
  top: 10px;
  right: 10px;
  position: absolute;
  width: 8px;
  height: 8px;
  background: rgba(0, 0, 0);
  border-radius: 50%;
}

.keyboard__key--active::after {
  background: #08ff00;
}

.keyboard__key--dark {
  background: rgba(0, 0, 0);
}

.keyboard__key--dark:hover {
  background: rgba(36, 35, 35);
}

.keyboard__key--dark:active {
  background: rgba(0, 0, 0);
}

#words {
  width: 175px;
  height: 35px;
  padding: 20px;
}

#TB {
  height: 400px;
  width: 300px;
}

/* styling for switch element */
#flexSwitchCheckDefault {
  width: 175px;
  height: 35px;
}
#inpBlock {
  display: flex;
  align-items: center;
  justify-content: center;
}
#b1 {
  display: flex;
  align-items: center;
  justify-content: center;
}
/* css for alert boxes */
#customAlert {
  display: none;
  position: fixed;
  top: 0px;
  left: 0px;
  right: 0px;
  bottom: 0;
  z-index: 999;

  background-color: rgba(255, 255, 255, 0.1);
}
#customAlert1 {
  display: none;

  position: fixed;
  top: 0px;
  left: 0px;
  right: 0px;
  bottom: 0;
  z-index: 999;

  background-color: rgba(255, 255, 255, 0.1);
}
#customAlert2 {
  display: none;

  position: fixed;
  top: 0px;
  left: 0px;
  right: 0px;
  bottom: 0;
  z-index: 999;

  background-color: rgba(255, 255, 255, 0.1);
}
#box {
  border-radius: 5px;
  margin-top: 200px;
  margin-left: 520px;
  margin-right: 400px;
  margin-bottom: 400px;
  height: 150px;
  width: 500px;
  text-align: center;
  box-shadow: 2px 2px 8px black;
  background-color: white;
}
.heading {
  background-color: red;
  color: white;
  font-size: larger;
  padding: 5px;
}
.content {
  margin-top: 30px;
}
/* css for buttons in alert boxes */
.confirmbtn {
  height: 40px;
  width: 80px;
  border-radius: 8px;
  background-color: #339966;
  color: white;
  cursor: pointer;
  margin-top: 0px;
  margin-left: 10px;
}
.confirmbtn1 {
  height: 40px;
  width: 80px;
  border-radius: 8px;
  background-color: rgb(247, 26, 26);
  color: white;
  cursor: pointer;
  margin-top: 0px;
  margin-left: 10px;
}

.confirmbtn:hover {
  transform: scale(1.5);
  background: #339966;
  transition: 0.5s;
}
.confirmbtn1:hover {
  transform: scale(1.5);
  background: rgb(247, 26, 26);
  transition: 0.5s;
}


/* keyboard Styling */
.keyboard {
  position: fixed;
  bottom: 0;
  width: 100%;
  padding: 5px 0;
  background: #fdffff;
  background-image: linear-gradient(
      rgba(255, 255, 255, 0.5),
      rgba(255, 255, 255, 0.5)
    ),
    url("4572_montreal_canadiens-jersey-2021.png");
  background-size: cover;
  background-position: center;
  box-shadow: 0 0 50px rgba(0, 0, 0);
  user-select: none;
  transition: bottom 0.4s;
  border: 3px solid #000000;
  border-radius: 10px;
}

.keyboard--hidden {
  bottom: -100%;
}

.keyboard__keys {
  text-align: center;
}

.keyboard__key:hover {
  transform: scale(1.5);
  background: rgba(151, 1, 1);
  transition: 0.5s;
}

.keyboard__key {
  height: 45px;
  width: 6%;
  max-width: 90px;
  margin: 3px;
  border-radius: 8px;
  border: 1px solid #000000;
  background: rgba(209, 1, 1);
  color: #ffffff;
  font-size: 1.05rem;
  outline: none;
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  text-align: center;
  justify-content: center;
  vertical-align: top;
  padding: 0;
  position: relative;
  transition: 0.5s;
}

.keyboard__key:active {
  background: rgba(117, 0, 0);
}

.keyboard__key--wide {
  width: 12%;
  background: rgba(0, 72, 206);
  color: #ffffff;
}

.keyboard__key--wide:hover {
  background: rgba(1, 54, 153);
}

.keyboard__key--wide:active {
  background: rgba(0, 44, 126);
}

.keyboard__key--extra-wide {
  width: 80%;
  max-width: 515px;
  position: relative;
  background: rgba(0, 72, 206);
  color: #ffffff;
}

.keyboard__key--extra-wide:hover {
  width: 100%;
  max-width: 515px;
  position: relative;
  background: rgba(1, 40, 112);
  color: #ffffff;
}

.keyboard__key--extra-wide:active {
  background: rgba(0, 44, 126);
}

.keyboard__key--activatable::after {
  content: "";
  top: 10px;
  right: 10px;
  position: absolute;
  width: 8px;
  height: 8px;
  background: rgba(0, 0, 0);
  border-radius: 50%;
}

.keyboard__key--active::after {
  background: #08ff00;
}

.keyboard__key--dark {
  background: rgba(0, 0, 0);
}

.keyboard__key--dark:hover {
  background: rgba(36, 35, 35);
}

.keyboard__key--dark:active {
  background: rgba(0, 0, 0);
}

</style>

<script>
    //javascript code for blog app including functions of buttons and include functions for alert boxes and sliders
/* Authors
Aliz Dhital 
Andrew Ali 
Olorunfemi Adeosun 
Lisha Tamang 
*/
const SERVER_URL2 = "http://140.184.230.209:3056";

let z = document.getElementById("CH1");


var isVis = true;

//hides and shows keyboard and text area elements

function vis() {
    if (isVis) {

        document.getElementById("inpBlock").style.visibility = "Visible";
        document.getElementById("d2").style.display = "none";
        document.getElementById("b1").style.visibility = "visible";
        document.getElementById("b2").style.visibility = "visible";

        isVis = false;
    }
    else {

        document.getElementById("inpBlock").style.visibility = "Hidden";
        document.getElementById("d2").style.display = "Block";
        document.getElementById("b2").style.visibility = "Hidden";
        document.getElementById("b1").style.visibility = "hidden";

        isVis = true;
    }
}

let beenPressed = false;

//funtion used to set value to true on HTML shift element
function toTrue() {
    beenPressed = true;
}

//allows typing in textarea
function addChar(selection) {
    // Get the value from the id'ed field
    var currChars = document.getElementById("w3review").value;

    if (selection === "bksp") {
        // Set the id'ed field to a shortened string
        // @ts-ignore
        document.getElementById("w3review").value = currChars.substring(0, currChars.length - 1);
    }
    else {
        if (beenPressed) {
            document.getElementById("w3review").value = currChars.concat(selection.toUpperCase());
            beenPressed = false;
        } else {
            document.getElementById("w3review").value = currChars.concat(selection);
        }
    }
}
// function for undo button
function undo() {

    var str = document.getElementById("w3review").value;
    var lastIndex = str.lastIndexOf(" ");

    // document.getElementById("w3review").innerHTML = str.substring(0, lastIndex);
    document.getElementById("w3review").value = str.substring(0, lastIndex);

    document.getElementById("ubtn").addEventListener('click', () => {
        document.getElementById("w3review").focus();
    });
}


//saves value to console
function enter() {
    // var currChars = $("#w3review").val();


    // $("#w3review").val(currChars.concat("                                                                                                      "));

}


//removes all text in text area
function cancel() {
    document.getElementById("w3review").value = "";
    vis();
    window.location.reload();

}


function save() {

    let input1 = document.getElementById("w3review").value



    $.post(SERVER_URL2 + "/w3review", { name: input1 });

    $.post(SERVER_URL2 + "/blogs")


    vis();
    window.location.reload();



}
function saveWordBank() {
    let wordbank_textarea = document.getElementById("w").value;
    document.getElementById("test").innerHTML += '<a href="#" class="btn btn-primary">' + " "+ wordbank_textarea + '</a>';
    console.log("hello")

    $.post(SERVER_URL2 + "/w", { name: wordbank_textarea });




    document.getElementById("test").addEventListener("click", function () {
        addChar2(wordbank_textarea);
    });
    console.log("work please ddddd");
    document.getElementById("w").value = "";
    document.getElementById("w").focus();
}

//variable used in addChar2 function
let beenPressed2 = true;

//logic for word bank
function addChar2(selection) {
    // Get the value from the id'ed field
    var currChars = document.getElementById("w3review").value;

    if (beenPressed2) {
        document.getElementById("w3review").value = currChars.concat(selection + " ");

    }
}


// java script for displaying and hiding alert boxes
function showWar() {
    document.getElementById("customAlert").style.display = "block";

}
function showWar1() {
    document.getElementById("customAlert1").style.display = "block";

}

function showWar2() {
    document.getElementById("customAlert2").style.display = "block";

}
function hidealert() {

    document.getElementById("customAlert").style.display = "none";
}
function hideWar1() {
    hidealert();
    document.getElementById("customAlert1").style.display = "none";
}
function hideWar2() {
    hidealert();
    document.getElementById("customAlert2").style.display = "none";
}



//keyboard js
const keyLayout = [
    "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "backspace",
    "q", "w", "e", "r", "t", "y", "u", "i", "o", "p",
    "caps", "a", "s", "d", "f", "g", "h", "j", "k", "l", "enter",
    "done", "z", "x", "c", "v", "b", "n", "m", ",", ".", "?",
    "space"
];
const SymbolLayout = [
    "!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "backspace",
    "q", "w", "e", "r", "t", "y", "u", "i", "o", "p",
    "caps", "a", "s", "d", "f", "g", "h", "j", "k", "l", "enter",
    "done", "z", "x", "c", "v", "b", "n", "m", ",", ".", "?",
    "space"
];

const Keyboard = {
    elements: {
        main: null,
        keysContainer: null,
        keys: []
    },

    eventHandlers: {
        oninput: null,
        onclose: null
    },

    properties: {
        value: "",
        capsLock: false
    },

    init() {
        // Create main elements
        this.elements.main = document.createElement("div");
        this.elements.keysContainer = document.createElement("div");

        // Setup main elements
        this.elements.main.classList.add("keyboard", "keyboard--hidden");
        this.elements.keysContainer.classList.add("keyboard__keys");
        this.setLayout(keyLayout);

        // Add to DOM
        this.elements.main.appendChild(this.elements.keysContainer);
        document.body.appendChild(this.elements.main);

        // Automatically use keyboard for elements with .use-keyboard-input
        document.querySelectorAll("#w3review").forEach(element => {
            element.addEventListener("focus", () => {
                this.open(element.value, currentValue => {
                    element.value = currentValue;
                });
            });
        });

        document.querySelectorAll(".form-control").forEach(element => {
            element.addEventListener("focus", () => {
                this.open(element.value, currentValue => {
                    element.value = currentValue;
                });
            });
        });
    },
    setLayout(layout) {
        this.elements.keysContainer.innerHTML = "";
        this.elements.keysContainer.appendChild(this._createKeys(layout));
        this.elements.keys = this.elements.keysContainer.querySelectorAll(".keyboard__key");
    },
    _createKeys(layout) {
        const fragment = document.createDocumentFragment();

        // Creates HTML for an icon
        const createIconHTML = (icon_name) => {
            return `<i class="material-icons">${icon_name}</i>`;
        };

        layout.forEach(key => {
            const keyElement = document.createElement("button");
            const insertLineBreak = ["backspace", "p", "enter", "?"].indexOf(key) !== -1;


            // Add attributes/classes
            keyElement.setAttribute("type", "button");
            keyElement.classList.add("keyboard__key");

            switch (key) {
                case "backspace":
                    keyElement.classList.add("keyboard__key--wide");
                    keyElement.innerHTML = createIconHTML("backspace");

                    keyElement.addEventListener("click", () => {
                        this.properties.value = this.properties.value.substring(0, this.properties.value.length - 1);
                        this._triggerEvent("oninput");
                    });

                    break;

                case "caps":
                    keyElement.classList.add("keyboard__key--wide", "keyboard__key--activatable");
                    keyElement.innerHTML = createIconHTML("vertical_align_top");


                    keyElement.addEventListener("click", () => {
                        this._toggleCapsLock();
                        keyElement.classList.toggle("keyboard__key--active", this.properties.capsLock);

                    });

                    break;

                case "enter":
                    keyElement.classList.add("keyboard__key--wide");
                    keyElement.innerHTML = createIconHTML("keyboard_return");

                    keyElement.addEventListener("click", () => {
                        this.properties.value += "\n";
                        this._triggerEvent("oninput");
                    });

                    break;

                case "space":
                    keyElement.classList.add("keyboard__key--extra-wide");
                    keyElement.innerHTML = createIconHTML("space_bar");

                    keyElement.addEventListener("click", () => {
                        this.properties.value += " ";
                        this._triggerEvent("oninput");
                    });

                    break;

                case "done":
                    keyElement.classList.add("keyboard__key--wide", "keyboard__key--dark");
                    keyElement.innerHTML = createIconHTML("done");

                    keyElement.addEventListener("click", () => {
                        this.close();
                        this._triggerEvent("onclose");
                    });

                    break;

                default:
                    keyElement.textContent = key.toLowerCase();

                    keyElement.addEventListener("click", () => {
                        this.properties.value += this.properties.capsLock ? key.toUpperCase() : key.toLowerCase();
                        this._triggerEvent("oninput");
                    });

                    break;
            }

            fragment.appendChild(keyElement);

            if (insertLineBreak) {
                fragment.appendChild(document.createElement("br"));
            }
        });

        return fragment;
    },

    _triggerEvent(handlerName) {
        if (typeof this.eventHandlers[handlerName] == "function") {
            this.eventHandlers[handlerName](this.properties.value);
        }
    },

    _toggleCapsLock() {
        this.properties.capsLock = !this.properties.capsLock;

        for (const key of this.elements.keys) {
            if (key.childElementCount === 0) {
                key.textContent = this.properties.capsLock ? key.textContent.toUpperCase() : key.textContent.toLowerCase();
            }
        }
    },

    open(initialValue, oninput, onclose) {
        this.properties.value = initialValue || "";
        this.eventHandlers.oninput = oninput;
        this.eventHandlers.onclose = onclose;
        this.elements.main.classList.remove("keyboard--hidden");
    },

    close() {
        this.properties.value = "";
        this.eventHandlers.oninput = oninput;
        this.eventHandlers.onclose = onclose;
        this.elements.main.classList.add("keyboard--hidden");
    }
};

window.addEventListener("DOMContentLoaded", function () {
    Keyboard.init();
});

</script>

</head>

<body>
    <div class="m-2" id="d2">
        <div class="row">
            <!--Table heads-->
            <div class="col-sm-3" style="text-align:center">Blog Name</div>
            <div class="col-sm-3"> Edit</div>
            <div class="col-sm-3">Publish</div>
        </div>

        <!--Blog name input field-->
        <div class="row">

            <div class="col-sm-3" style="text-align:center">
                1
            </div>

            <!--Sliders-->
            <div class="col-sm-3">
                <div class="form-check form-switch" id="CH1">
                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" onclick="vis()">
                </div>
            </div>
            <div class="col-sm-3">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault">
                </div>
            </div>
        </div>

        <!--Blog name input field-->
        <div class="row">
            <div class="col-sm-3" style="text-align:center">
                2
            </div>

            <!--Sliders-->
            <div class="col-sm-3">
                <div class="form-check form-switch" id="CH2">
                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" onclick="vis()">
                </div>
            </div>
            <div class="col-sm-3">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault">
                </div>
            </div>
        </div>

        <!--Blog name input field-->
        <div class="row">
            <div class="col-sm-3" style="text-align:center">
                3
            </div>

            <!--Sliders-->
            <div class="col-sm-3">
                <div class="form-check form-switch" id="CH3">
                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" onclick="vis()">
                </div>
            </div>
            <div class="col-sm-3">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault">
                </div>
            </div>
        </div>
    </div>


    <!--text area-->
    <form action="/blogs" method="POST">
        <div class="m-2" id="inpBlock">
            <textarea id="w3review" rows="8" cols="74" name="body"> </textarea>
        </div>

        <!--save button-->
    <div class="m-2" id="b1">

        <button type="button" onclick="showWar()" class="btn btn-danger">
            Save
        </button>
        <!-- Alert box -->
        <div id="customAlert">
            <div id="box">
                <div class="heading">
                    custom alert.

                </div>
                <div class="content">
                    <p>Are you sure?</p>
                    <button type=" button" class="confirmbtn" onclick="hidealert()">Cancel</button>
                    <button type=" button" class="confirmbtn1" onclick="showWar1()">Continue</button>
                </div>
            </div>
        </div>
        <div id="customAlert1">
            <div id="box">
                <div class="heading">
                    Custom Alert.

                </div>
                <div class="content">
                    <p>Are you really sure?</p>
                    <button type=" button" class="confirmbtn" onclick="hideWar1()">Cancel</button>
                    <button type=" button" class="confirmbtn1" onclick="save()">Continue</button>
                </div>
            </div>
        </div>

        <!--cancel button-->
        <button type="button" class="btn btn-primary" onclick="showWar()">
            Cancel
        </button>
        <!-- Alert box -->
        <div id="customAlert">
            <div id="box">
                <div class="heading">
                    Custom Alert.

                </div>
                <div class="content">
                    <p>Are you really sure?</p>
                    <button type=" button" class="confirmbtn" onclick="hidealert()">Cancel</button>
                    <button type=" button" class="confirmbtn1" onclick="showWar2()">Continue</button>
                </div>
            </div>
        </div>
        <div id="customAlert2">
            <div id="box">
                <div class="heading">
                    Custom Alert.

                </div>
                <div class="content">
                    <p>Are you sure?</p>
                    <button type=" button" class="confirmbtn" onclick="hideWar2()">Cancel</button>
                    <button type=" button" class="confirmbtn1" onclick="cancel()">Continue</button>
                </div>
            </div>
        </div>

        <button type="button" class="btn btn-danger" onclick="undo()" id="ubtn">
            Undo
        </button>
    </div>
    
    </form>

    <!-- html for word bank -->
    <div class="card" id="b2">
        <h5 class="card-header" style="background-color: red; color: white;">Word Bank</h5>
        <div class="input-group mb-3">
            <input type="text" class="form-control" id="w" placeholder="Type a word into the word bank"
                aria-label="Recipient's username" aria-describedby="basic-addon2">
            <button class="input-group-text" id="save-wordbank" onclick="saveWordBank()"
                style="background-color: blue; color: white;">Save</button>
        </div>
        <div class="card-body">
            <div id="test" style="border-left: 4px;"></div>
        </div>

    </div>
    

    

    <!-- script tag for changing visibility -->
    <Script>

        document.getElementById("inpBlock").style.visibility = "Hidden";
        document.getElementById("b1").style.visibility = "Hidden";
        document.getElementById("b2").style.visibility = "Hidden";
        vis();
    </Script>

    </div>



</body>

</html>